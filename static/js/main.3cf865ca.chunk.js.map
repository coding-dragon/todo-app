{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddTodo","state","title","show","handleClose","setState","handleShow","onSubmit","e","preventDefault","props","addTodo","onChange","target","value","Button","onClick","this","Modal","onHide","Title","Body","Form","Group","Label","Control","type","name","placeholder","size","block","Component","TodoItem","getStyle","textDecoration","todo","isCompleted","id","Container","style","width","CSSTransition","key","timeout","classNames","ListGroup","Item","markComplete","bind","delTodo","variant","Todos","allCount","todos","length","activeCount","reduce","accum","completedCount","Fragment","marginTop","marginBottom","TransitionGroup","map","protoTypes","PropTypes","array","isRequired","App","uuid","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3cf865ca.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <header className=\"myNavbar\">\n                <h3>To-do list</h3>\n            </header>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport { Button, Modal, Form } from 'react-bootstrap';\n\nclass AddTodo extends Component {\n    state = {\n        title: '',\n        show: false\n    }\n\n    handleClose = () => {\n        this.setState({ show: false })\n    } \n    handleShow = () => {\n        this.setState({ show: true })\n    } \n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: '', show: false })\n    }\n\n    onChange = (e) => this.setState({ title: e.target.value }) \n\n    render() {\n        return (\n            <div>\n                <Button className=\"addBtn\" onClick={this.handleShow} >+</Button>\n\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header>\n                        <Modal.Title>Create Todo</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form onSubmit={this.onSubmit}>\n                            <Form.Group>\n                                <Form.Label>Task Name</Form.Label>\n                                <Form.Control \n                                    type=\"text\" \n                                    name=\"title\"\n                                    placeholder=\"Enter Task title\"\n                                    value={this.state.title}\n                                    onChange={this.onChange}\n                                />\n                            </Form.Group>\n                            <Button className=\"submitTodoBtn\" type=\"submit\" size=\"lg\" block>Submit</Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Container, ListGroup, Button } from 'react-bootstrap';\nimport { CSSTransition }from 'react-transition-group';\n\nclass TodoItem extends Component {\n    getStyle = () => {\n        return {\n            textDecoration: this.props.todo.isCompleted ? 'line-through' : 'none'\n        }\n    } \n\n    render(){\n        const { id, name } = this.props.todo;\n        return (\n            <Container style={{ width: '100%' }}>\n                <CSSTransition key={id} timeout={500} classNames=\"item\" >\n                    <ListGroup.Item className=\"todo-item\">\n                        <label className=\"checkbox\">\n                            <input onChange={this.props.markComplete.bind(this, id)} type=\"checkbox\"/>\n                            <span className=\"checkmark\"></span>\n                        </label>\n                        <span className=\"todo-title\">{name}</span>\n                        <Button\n                        onClick={this.props.delTodo.bind(this, id)}\n                        className=\"remove-btn\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        >&times;</Button>\n\n                    </ListGroup.Item>\n                </CSSTransition>\n            </Container>\n        )\n    }\n}\n\n\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nimport { ListGroup } from 'react-bootstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nclass Todos extends Component {\n  render() {\n      const allCount = this.props.todos.length;\n      const activeCount = this.props.todos.reduce((accum, todo) => {\n          return todo.isCompleted ? accum : accum + 1;\n      }, 0);\n      const completedCount = allCount - activeCount;\n      return (\n          <React.Fragment>\n              <div className=\"countDiv\">\n                <div className=\"allDiv\">\n                    <h3>{allCount}</h3>\n                    <p>All Tasks</p>\n                </div>\n                <div className=\"activeDiv\">\n                    <h3>{activeCount}</h3>\n                    <p>Active</p>\n                </div>\n                <div className=\"completeDiv\">\n                    <h3>{completedCount}</h3>\n                    <p>Completed</p>\n                </div>\n              </div>\n          <div style={{ marginTop: '2rem' }}>\n              <ListGroup style={{ marginBottom: '1rem' }}>\n                    <TransitionGroup className=\"todo-list\">\n                        {this.props.todos.map((todo) =>  (\n                            <CSSTransition key={todo.id} timeout={500} classNames=\"item\">\n                                <TodoItem todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}  />\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n              </ListGroup>\n          </div>\n          </React.Fragment>\n      )\n  }\n}\n\n//PropTypes\nTodos.protoTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default Todos;","import React, { Component} from 'react';\nimport uuid from 'uuid';\n\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport Todos from './components/Todos';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        name: 'Create task by tomorrow',\n        isCompleted: false\n      }\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map( todo => {\n      if(todo.id === id) {\n        todo.isCompleted = !todo.isCompleted\n      }\n      return todo;\n    }) })\n  }\n\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id )]})\n  }\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      name: title,\n      isCompleted: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo ]})\n  }\n\n  render() {\n      return (\n          <div>\n              <Header/>\n              <AddTodo addTodo={this.addTodo} />\n              <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n          </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}